<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="1" ignored="0" total="8" passed="7">
  <reporter-output>
  </reporter-output>
  <suite name="Suite" duration-ms="3413" started-at="2020-04-07T11:45:58Z" finished-at="2020-04-07T11:46:02Z">
    <groups>
    </groups>
    <test name="TestNG1" duration-ms="3413" started-at="2020-04-07T11:45:58Z" finished-at="2020-04-07T11:46:02Z">
      <class name="test.controller.TestOwner">
        <test-method status="PASS" signature="leaderboardList()[pri:0, instance:test.controller.TestOwner@2e89d933]" name="leaderboardList" duration-ms="1435" started-at="2020-04-07T11:45:58Z" description="排行榜列表" finished-at="2020-04-07T11:46:00Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- leaderboardList -->
        <test-method status="PASS" signature="queryCurrentSeason()[pri:0, instance:test.controller.TestOwner@2e89d933]" name="queryCurrentSeason" duration-ms="336" started-at="2020-04-07T11:46:00Z" description="查询当前赛季" finished-at="2020-04-07T11:46:00Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- queryCurrentSeason -->
        <test-method status="PASS" signature="queryMyRanking()[pri:0, instance:test.controller.TestOwner@2e89d933]" name="queryMyRanking" duration-ms="330" started-at="2020-04-07T11:46:00Z" description="查询我的排行" finished-at="2020-04-07T11:46:01Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- queryMyRanking -->
        <test-method status="PASS" signature="querySeasonNumber()[pri:0, instance:test.controller.TestOwner@2e89d933]" name="querySeasonNumber" duration-ms="314" started-at="2020-04-07T11:46:01Z" description="查询赛季人数" finished-at="2020-04-07T11:46:01Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- querySeasonNumber -->
        <test-method status="PASS" signature="querySeasonSettlementRewards()[pri:0, instance:test.controller.TestOwner@2e89d933]" name="querySeasonSettlementRewards" duration-ms="321" started-at="2020-04-07T11:46:01Z" description="查询赛季结算奖励" finished-at="2020-04-07T11:46:01Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- querySeasonSettlementRewards -->
        <test-method status="PASS" signature="receiveSeasonSettlementAward()[pri:0, instance:test.controller.TestOwner@2e89d933]" name="receiveSeasonSettlementAward" duration-ms="1" started-at="2020-04-07T11:46:01Z" description="领取赛季结算奖励" finished-at="2020-04-07T11:46:01Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- receiveSeasonSettlementAward -->
        <test-method status="PASS" signature="receiveUpgradeAward()[pri:0, instance:test.controller.TestOwner@2e89d933]" name="receiveUpgradeAward" duration-ms="317" started-at="2020-04-07T11:46:01Z" description="领取升级奖励" finished-at="2020-04-07T11:46:01Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- receiveUpgradeAward -->
        <test-method status="FAIL" signature="userInformation()[pri:0, instance:test.controller.TestOwner@2e89d933]" name="userInformation" duration-ms="329" started-at="2020-04-07T11:46:01Z" description="用户信息" finished-at="2020-04-07T11:46:02Z">
          <exception class="java.lang.NullPointerException">
            <full-stacktrace>
              <![CDATA[java.lang.NullPointerException
at test.service.UserInformation.userInformation(UserInformation.java:39)
at test.controller.TestOwner.userInformation(TestOwner.java:15)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:583)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at test.TestngRun.run(TestngRun.java:21)
at com.ceshi.serviceImpl.TestDataServiceImpl.function(TestDataServiceImpl.java:66)
at com.ceshi.controller.TestDataController.function(TestDataController.java:89)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)
at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)
at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200)
at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:834)
at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415)
at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
at java.lang.Thread.run(Thread.java:748)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NullPointerException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- userInformation -->
      </class> <!-- test.controller.TestOwner -->
    </test> <!-- TestNG1 -->
  </suite> <!-- Suite -->
</testng-results>
